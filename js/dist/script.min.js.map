{"version":3,"sources":["script.js"],"names":["w","h","ctx","canvas","getContext","sin","Math","cos","PI","hypot","min","max","spawn","pts","many","x","rnd","innerWidth","i","len","tx","ty","innerHeight","pts2","kx","ky","walkRadius","r","drawCircle","pt","y","tick","t","selfMoveX","seed","selfMoveY","fy","fx","forEach","dx","dy","increasing","dir","lerp","pt2","spiders","recalc","X","Y","arguments","length","undefined","random","color","beginPath","ellipse","fill","drawLine","x0","y0","x1","y1","moveTo","noise","lineTo","k","stroke","n","f","_toConsumableArray","Array","map","_","a","b","addEventListener","e","spider","requestAnimationFrame","clientX","anim","clientY","fillStyle","strokeStyle","width","height"],"mappings":"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","file":"script.min.js","sourcesContent":["let w, h;\r\nconst ctx = canvas.getContext(\"2d\");\r\nconst { sin, cos, PI, hypot, min, max } = Math;\r\n\r\n\r\n\r\nfunction spawn() {\r\n    \r\n    const pts = many(333, () => {\r\n        return {\r\n            x: rnd(innerWidth),\r\n            y: rnd(innerHeight),\r\n            len: 0,\r\n            r: 0\r\n        };\r\n    });\r\n    \r\n    const pts2 = many(9, (i) => {\r\n        return {\r\n            x: cos((i / 9) * PI * 2),\r\n            y: sin((i / 9) * PI * 2)\r\n        };\r\n    });\r\n    \r\n    let seed = rnd(100)\r\n    let tx = rnd(innerWidth); \r\n    let ty = rnd(innerHeight);\r\n    let x = rnd(innerWidth)\r\n    let y = rnd(innerHeight)\r\n    let kx = rnd(0.5, 0.5)\r\n    let ky = rnd(0.5, 0.5)\r\n    let walkRadius = pt(rnd(50,50), rnd(50,50))\r\n   let r = innerWidth / rnd(100, 150);\r\n    \r\n    function paintPt(pt){\r\n        pts2.forEach((pt2) => {\r\n            if (!pt.len )\r\n                return\r\n            drawLine(\r\n                lerp(x + pt2.x * r, pt.x, pt.len * pt.len),\r\n                lerp(y + pt2.y * r, pt.y, pt.len * pt.len),\r\n                x + pt2.x * r,\r\n                y + pt2.y * r\r\n            );\r\n        });\r\n        drawCircle(pt.x, pt.y, pt.r);\r\n    }\r\n  \r\n    return {\r\n        follow(x,y) {\r\n            tx = x;\r\n            ty = y;\r\n        },\r\n        \r\n        tick(t) {\r\n        \r\n    const selfMoveX = cos(t*kx+seed)*walkRadius.x        \r\n    const selfMoveY = sin(t*ky+seed)*walkRadius.y      \r\n    let fx = tx + selfMoveX;         \r\n    let fy = ty + selfMoveY; \r\n            \r\n    x += min(innerWidth/100, (fx - x)/10)\r\n    y += min(innerWidth/100, (fy - y)/10)\r\n            \r\n    let i = 0\r\n    pts.forEach((pt) => {\r\n        const dx = pt.x - x,\r\n            dy = pt.y - y;\r\n        const len = hypot(dx, dy);\r\n        let r = min(2, innerWidth / len / 5);\r\n        pt.t = 0;\r\n        const increasing = len < innerWidth / 10 \r\n            && (i++) < 8;\r\n        let dir = increasing ? 0.1 : -0.1;\r\n        if (increasing) {\r\n            r *= 1.5;\r\n        }\r\n        pt.r = r;\r\n        pt.len = max(0, min(pt.len + dir, 1));\r\n        paintPt(pt)\r\n    });\r\n\r\n            \r\n                   \r\n        } \r\n    }\r\n}\r\n\r\nconst spiders = many(2, spawn)\r\n\r\naddEventListener(\"pointermove\", (e) => {\r\n    spiders.forEach(spider => {\r\n        spider.follow(e.clientX, e.clientY)\r\n    })\r\n});\r\n\r\nrequestAnimationFrame(function anim(t) {\r\n    if (w !== innerWidth) w = canvas.width = innerWidth;\r\n    if (h !== innerHeight) h = canvas.height = innerHeight;\r\n    ctx.fillStyle = \"#000\";\r\n    drawCircle(0, 0, w * 10);\r\n    ctx.fillStyle = ctx.strokeStyle = \"#fff\";\r\n    t/=1000\r\n    spiders.forEach(spider => spider.tick(t))\r\n    requestAnimationFrame(anim);\r\n});\r\n\r\nfunction recalc(X, Y) {\r\n    tx = X;\r\n    ty = Y;\r\n}\r\n\r\nfunction rnd(x = 1, dx = 0) {\r\n    return Math.random() * x + dx;\r\n}\r\n\r\nfunction drawCircle(x, y, r, color) {\r\n    //console.log(x,y,r)\r\n    // ctx.fillStyle = color;\r\n    ctx.beginPath();\r\n    ctx.ellipse(x, y, r, r, 0, 0, PI * 2);\r\n    ctx.fill();\r\n}\r\n\r\nfunction drawLine(x0, y0, x1, y1) {\r\n    ctx.beginPath();\r\n    ctx.moveTo(x0, y0);\r\n\r\n    many(100, (i) => {\r\n        i = (i + 1) / 100;\r\n        let x = lerp(x0, x1, i);\r\n        let y = lerp(y0, y1, i);\r\n        let k = noise(x/5+x0, y/5+y0) * 2;\r\n        ctx.lineTo(x + k, y + k);\r\n    });\r\n\r\n    ctx.stroke();\r\n}\r\n\r\nfunction many(n, f) {\r\n    return [...Array(n)].map((_, i) => f(i));\r\n}\r\n\r\nfunction lerp(a, b, t) {\r\n    return a + (b - a) * t;\r\n}\r\n\r\nfunction noise(x, y, t = 101) {\r\n    let w0 = sin(0.3 * x + 1.4 * t + 2.0 + \r\n                 2.5 * sin(0.4 * y + -1.3 * t + 1.0));\r\n    let w1 = sin(0.2 * y + 1.5 * t + 2.8 + \r\n                 2.3 * sin(0.5 * x + -1.2 * t + 0.5));\r\n    return w0 + w1;\r\n}\r\n\r\nfunction pt(x,y){\r\n    return {x,y}\r\n}"]}